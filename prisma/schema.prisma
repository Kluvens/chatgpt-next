// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String?  // Password can be null for OAuth users
  name          String
  image         String
  emailVerified DateTime?
  createdAt     DateTime @default(now())
  
  // Relations
  accounts  Account[] // Linking to OAuth accounts
  chats     Chat[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String   // Foreign key to User model
  type              String   // oauth
  provider          String   // OAuth provider (e.g., "google")
  providerAccountId String   // Provider-specific account ID
  refresh_token     String?  // Refresh token provided by the provider
  access_token      String?  // Access token provided by the provider
  expires_at        Int?     // Expiration time for the access token
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Ensures each provider account is unique
  @@index([userId])
}

model Message {
  id        Int     @id @default(autoincrement())
  request   String
  response  String
  chatId    String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])

  @@index([chatId])
}

model Chat {
  id        String   @id @default(cuid())
  model     ModelType
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  messages  Message[]
  createdAt DateTime @default(now())

  @@index([userId])
}

enum ModelType {
  GPT_4
  GPT_3_5
  GPT_4O
}
